import os
import requests
import telebot
from telebot import types
from dotenv import load_dotenv
import psycopg2.pool
from urllib.parse import urlparse
import logging
from datetime import datetime, timedelta, timezone
import gettext
from apscheduler.schedulers.background import BackgroundScheduler

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format="%(asctime)s - %(levelname)s - %(message)s")

# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
BOT_TOKEN = os.getenv("BOT_TOKEN")
API_KEY = os.getenv("WEATHER_API")
DATABASE_URL = os.getenv("DATABASE_URL")

if not BOT_TOKEN or not API_KEY:
    raise ValueError("Missing BOT_TOKEN or WEATHER_API in environment variables.")

if not DATABASE_URL:
    raise ValueError("DATABASE_URL is not set in environment variables.")

# –ü–∞—Ä—Å–∏–º DATABASE_URL
parsed_url = urlparse(DATABASE_URL)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—É–ª–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
DB_PARAMS = {
    "dbname": parsed_url.path[1:], 
    "user": parsed_url.username,
    "password": parsed_url.password,
    "host": parsed_url.hostname,
    "port": parsed_url.port,
}

# –ü–æ–ø—Ä–æ–±—É–µ–º –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è, —Å–Ω–∞—á–∞–ª–∞ –±–µ–∑ SSL
try:
    conn_pool = psycopg2.pool.SimpleConnectionPool(1, 10, **DB_PARAMS)
    logging.info("Connected to PostgreSQL without SSL.")
except psycopg2.OperationalError as e:
    logging.warning("Connection failed without SSL, retrying with sslmode='require'...")
    DB_PARAMS["sslmode"] = "require"
    conn_pool = psycopg2.pool.SimpleConnectionPool(1, 10, **DB_PARAMS)
    logging.info("Connected to PostgreSQL with sslmode='require'.")

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–æ—Ç—É
bot = telebot.TeleBot(BOT_TOKEN)
user_selected_city = {}

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º—É–ª—å—Ç–∏—è–∑—ã—á–Ω–æ—Å—Ç–∏
gettext.bindtextdomain("messages", "locale")
gettext.textdomain("messages")
_ = gettext.gettext  # –§—É–Ω–∫—Ü–∏—è –ø–µ—Ä–µ–≤–æ–¥–∞


def execute_query(query, params=None, fetchone=False, fetchall=False):
    """ –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ SQL-–∑–∞–ø—Ä–æ—Å–æ–≤ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –ø—É–ª–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π """
    conn = conn_pool.getconn()
    try:
        with conn.cursor() as cur:
            cur.execute(query, params)
            conn.commit()
            if fetchone:
                return cur.fetchone()
            elif fetchall:
                return cur.fetchall()
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ –ë–î: {e}")
    finally:
        conn_pool.putconn(conn)


def save_user(user):
    """ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö """
    query = """
        INSERT INTO telegram_users (telegram_id, username, first_name, last_name, language_code, is_premium)
        VALUES (%s, %s, %s, %s, %s, %s)
        ON CONFLICT (telegram_id) DO UPDATE 
        SET username = EXCLUDED.username, 
            first_name = EXCLUDED.first_name,
            last_name = EXCLUDED.last_name,
            language_code = EXCLUDED.language_code,
            is_premium = EXCLUDED.is_premium;
    """
    params = (user.id, user.username, user.first_name, user.last_name, user.language_code, getattr(user, "is_premium", False))
    execute_query(query, params)


@bot.message_handler(commands=['start'])
def start(message):
    save_user(message.from_user)
    
    markup = types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
    location_button = types.KeyboardButton(_('üìç –û—Ç–ø—Ä–∞–≤–∏—Ç—å –ª–æ–∫–∞—Ü–∏—é'), request_location=True)
    city_button = types.KeyboardButton(_('üèô –í—ã–±—Ä–∞—Ç—å –≥–æ—Ä–æ–¥'))
    
    markup.add(location_button, city_button)

    bot.send_message(
        message.chat.id,
        _("üëã –ü—Ä–∏–≤–µ—Ç! –Ø —Ç–≤–æ–π –ø–æ–≥–æ–¥–Ω—ã–π –±–æ—Ç!\n\nüåç –û—Ç–ø—Ä–∞–≤—å —Å–≤–æ—é **–ª–æ–∫–∞—Ü–∏—é** –∏–ª–∏ –≤—ã–±–µ—Ä–∏ **–≥–æ—Ä–æ–¥**, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã."),
        reply_markup=markup, parse_mode="Markdown"
    )

def make_weather_request(endpoint, params):
    """ –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ OpenWeatherMap """
    try:
        url = f"https://api.openweathermap.org/data/2.5/{endpoint}"
        params["appid"] = API_KEY
        params["units"] = "metric"
        response = requests.get(url, params=params)
        return response.json()
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ OpenWeatherMap: {e}")
        return None


def fetch_weather(chat_id, city):
    data = make_weather_request("weather", {"q": city})

    if not data or data.get("cod") != 200:
        bot.send_message(chat_id, f"‚ö†Ô∏è –ì–æ—Ä–æ–¥ **{city}** –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    try:
        temp = round(data["main"]["temp"])
        description = data["weather"][0]["description"].capitalize()
        icon_code = data["weather"][0]["icon"]
        icon_url = f"http://openweathermap.org/img/wn/{icon_code}@4x.png"

        response = (
            f"üå§ **–ü–æ–≥–æ–¥–∞ –≤ {city}**\n"
            f"üå° –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: *{temp}¬∞C*\n"
            f"üìñ –û–ø–∏—Å–∞–Ω–∏–µ: *{description}*"
        )

        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton("üìÖ –ü–æ–≥–æ–¥–∞ –Ω–∞ –∑–∞–≤—Ç—Ä–∞", callback_data=f"forecast_{city}"))
        markup.add(types.InlineKeyboardButton("üîî –ü–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", callback_data=f"notify_{city}"))

        bot.send_photo(chat_id, icon_url, caption=response, parse_mode="Markdown", reply_markup=markup)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–≥–æ–¥—ã: {e}")
        bot.send_message(chat_id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–≥–æ–¥–µ.")


@bot.message_handler(content_types=['location'])
def handle_location(message):
    if message.location:
        lat, lon = message.location.latitude, message.location.longitude
        data = make_weather_request("weather", {"lat": lat, "lon": lon})

        if data and data.get("cod") == 200:
            city = data.get("name")
            bot.send_message(message.chat.id, _("üìç –í—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ **{}**. –ü–æ–ª—É—á–∞–µ–º –ø–æ–≥–æ–¥—É‚Ä¶").format(city), parse_mode="Markdown")
            fetch_weather(message.chat.id, city)
        else:
            bot.send_message(message.chat.id, _("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≤–∞—à –≥–æ—Ä–æ–¥. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."))


@bot.message_handler(commands=["users_count"])
def users_count(message):
    admin_id = int(os.getenv("ADMIN_ID", 0))

    if message.chat.id == admin_id:
        count = execute_query("SELECT COUNT(*) FROM telegram_users;", fetchone=True)[0]
        bot.send_message(message.chat.id, _("üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {}").format(count))
    else:
        bot.send_message(message.chat.id, _("üö´ –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏."))


@bot.callback_query_handler(func=lambda call: call.data.startswith("notify_"))
def subscribe_notifications(call):
    city = call.data.replace("notify_", "")
    user_id = call.message.chat.id

    execute_query(
        "INSERT INTO weather_subscriptions (user_id, city) VALUES (%s, %s) "
        "ON CONFLICT (user_id) DO UPDATE SET city = EXCLUDED.city;",
        (user_id, city)
    )
    bot.send_message(user_id, f"‚úÖ –¢–µ–ø–µ—Ä—å –≤—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø–æ–≥–æ–¥–µ –≤ **{city}**!")


@bot.message_handler(commands=['unsubscribe'])
def unsubscribe_notifications(message):
    execute_query("DELETE FROM weather_subscriptions WHERE user_id = %s;", (message.chat.id,))
    bot.send_message(message.chat.id, "üö´ –í—ã –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –ø–æ–≥–æ–¥–µ.")


def send_weather_notifications():
    subscriptions = execute_query("SELECT user_id, city FROM weather_subscriptions;", fetchall=True)
    for user_id, city in subscriptions:
        fetch_weather(user_id, city)

@bot.callback_query_handler(func=lambda call: call.data.startswith("forecast_"))

def forecast_weather(call):
    city = call.data.replace("forecast_", "")
    user_id = call.message.chat.id

    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã –Ω–∞ 1 –¥–µ–Ω—å –≤–ø–µ—Ä—ë–¥
    data = make_weather_request("forecast", {"q": city, "cnt": 8})  # 8 –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ—Ç–º–µ—Ç–æ–∫ (24 —á–∞—Å–∞)

    if not data or data.get("cod") != "200":
        bot.send_message(user_id, f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã –¥–ª—è **{city}**.")
        return

        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –¥–µ–Ω—å
    tomorrow = datetime.now(timezone.utc) + timedelta(days=1)
    next_day_data = [entry for entry in data["list"] if datetime.fromtimestamp(entry["dt"], timezone.utc).date() == tomorrow.date()]



    if not next_day_data:
        bot.send_message(user_id, f"‚ö†Ô∏è –ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –∑–∞–≤—Ç—Ä–∞ –¥–ª—è **{city}** –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ä–µ–¥–Ω—é—é —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—É –∏ –æ–±—â–µ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø–æ–≥–æ–¥—ã
    avg_temp = sum(entry["main"]["temp"] for entry in next_day_data) / len(next_day_data)
    descriptions = {entry["weather"][0]["description"] for entry in next_day_data}
    weather_description = ", ".join(descriptions).capitalize()

    # –ë–µ—Ä—ë–º –∏–∫–æ–Ω–∫—É –ø–æ–≥–æ–¥—ã –∏–∑ –ø–µ—Ä–≤–æ–π –∑–∞–ø–∏—Å–∏
    icon_code = next_day_data[0]["weather"][0]["icon"]
    icon_url = f"http://openweathermap.org/img/wn/{icon_code}@4x.png"

    response = (
        f"üìÖ **–ü—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã –Ω–∞ –∑–∞–≤—Ç—Ä–∞ –≤ {city}**\n"
        f"üå° –°—Ä–µ–¥–Ω—è—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: *{round(avg_temp)}¬∞C*\n"
        f"üìñ –û–ø–∏—Å–∞–Ω–∏–µ: *{weather_description}*"
    )

    bot.send_photo(user_id, icon_url, caption=response, parse_mode="Markdown")

@bot.message_handler(func=lambda message: message.text == _('üèô –í—ã–±—Ä–∞—Ç—å –≥–æ—Ä–æ–¥'))
def ask_city(message):
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞, –¥–ª—è –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å –ø–æ–≥–æ–¥—É:")
    bot.register_next_step_handler(message, handle_city_input)


def handle_city_input(message):
    city = message.text.strip()
    if not city:
        bot.send_message(message.chat.id, "‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞.")
        return
    
    fetch_weather(message.chat.id, city)


scheduler = BackgroundScheduler()
scheduler.add_job(send_weather_notifications, "interval", hours=24, next_run_time=datetime.now() + timedelta(seconds=10))
scheduler.start()

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
bot.infinity_polling(none_stop=True)